/**
 * ↘️↘️
 * @author Muthu Kumar <https://mkr.pw>
 * isEq(item1, item2 [, compareKeys])
 * @description Deep compares objects or arrays and returns boolean.
 * Supports Number, String, Boolean, Regexp, Objects, Arrays
 * @param {*} item1 - Object or Array to compare against.
 * @param {*} item2 - Object or Array to compare with.
 * @param {Array} [compareKeys] - Keys to compare against. Ignores other keys.
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.isEq=f()}})(function(){var define,module,exports;return(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){'use strict';const isEq=(item1,item2,compareKeys)=>{if(typeof item1!==typeof item2)return!1;if((Array.isArray(item1)&&!Array.isArray(item2))||((Array.isArray(item2)&&!Array.isArray(item1))))return!1;if((typeof item1==='number')||(typeof item1==='string')||(typeof item1==='boolean')||(item1===null)||(item1===undefined)){return(item1===item2)};if(Number.isNaN(item1)&&Number.isNaN(item2))return!0;if(item1 instanceof RegExp)return String(item1)===String(item2);if(typeof(item1)!=='object'||typeof(item2)!=='object')
throw new Error('[isEq] Unhandleable input!');const item1Keys=Object.keys(item1);const item2Keys=Object.keys(item2);if(!compareKeys){compareKeys=item1Keys;if(item1Keys.length!==item2Keys.length){return!1}};if(!(Array.isArray(compareKeys)))throw new Error('[isEq] third parameter should be an array of keys!');if(compareKeys.length===0)return!0;for(let KeyIndex in compareKeys){let Key=compareKeys[KeyIndex];if(Array.isArray(item1[Key])&&Array.isArray(item2[Key])){Key=KeyIndex};if(item1[Key]!==item2[Key]){if(typeof(item1[Key]==='object')&&typeof(item2[Key]==='object')||(Array.isArray(item1[Key])&&Array.isArray(item2[Key]))){if(!isEq(item1[Key],item2[Key])){return!1}}else{return!1}}};return!0};module.exports=isEq},{}]},{},[1])(1)})